import{_ as a,o as i,c as l,a as e,b as t,e as r,d as n,r as o}from"./app.d5586ec4.js";const d={},c=r(`<h1 id="software-testing" tabindex="-1"><a class="header-anchor" href="#software-testing" aria-hidden="true">#</a> Software Testing</h1><p>Software testing helps to verify and confirm that the software</p><ul><li>Does not have any errors</li><li>Complies with technical requirements and design</li><li>Complies with user requirements by handling all exceptional and edge cases</li></ul><p>The automatic test describes the desired scenario that meets the requirements. If the scenario is violated in the future after refinement, the test will report it.</p><h2 id="the-testing-pyramid" tabindex="-1"><a class="header-anchor" href="#the-testing-pyramid" aria-hidden="true">#</a> The testing pyramid</h2><p>The testing pyramid, a popular QA model, includes the following levels of functional testing:</p><ul><li>End-to-end Testing</li><li>Integration Testing</li><li>Unit Testing</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">             -             </span></span>
<span class="line"><span style="color:#D4D4D4;">            / \\            </span></span>
<span class="line"><span style="color:#D4D4D4;">           /   \\           </span></span>
<span class="line"><span style="color:#D4D4D4;">          / e2e \\          </span></span>
<span class="line"><span style="color:#D4D4D4;">         /       \\         </span></span>
<span class="line"><span style="color:#D4D4D4;">        /---------\\        </span></span>
<span class="line"><span style="color:#D4D4D4;">       /           \\       </span></span>
<span class="line"><span style="color:#D4D4D4;">      / integration \\      </span></span>
<span class="line"><span style="color:#D4D4D4;">     /               \\     </span></span>
<span class="line"><span style="color:#D4D4D4;">    /-----------------\\    </span></span>
<span class="line"><span style="color:#D4D4D4;">   /                   \\   </span></span>
<span class="line"><span style="color:#D4D4D4;">  /     unit testing    \\  </span></span>
<span class="line"><span style="color:#D4D4D4;"> /                       \\ </span></span>
<span class="line"><span style="color:#D4D4D4;">---------------------------</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unit-testing" tabindex="-1"><a class="header-anchor" href="#unit-testing" aria-hidden="true">#</a> Unit testing</h3><p>Unit testing is the basis of the pyramid. Unit tests test the system at function, class, module, component level. Unit tests are always automated.</p><p>Unit tests help the developer both to improve the reliability of a component and to understand how the component works and to find out the input parameters, bottlenecks, and limitations.</p><p>The structure of unit tests usually follows the mnemonic rule &quot;AAA&quot; and consists of three blocks: &quot;arrange, act, assert&quot;.</p><h3 id="integration-testing" tabindex="-1"><a class="header-anchor" href="#integration-testing" aria-hidden="true">#</a> Integration testing</h3><p>Involves testing the links between modules or components, as well as link between component and system.</p><h3 id="end-to-end-testing" tabindex="-1"><a class="header-anchor" href="#end-to-end-testing" aria-hidden="true">#</a> End-to-end testing</h3><p>Some experts suggest starting with end-to-end testing and go down the pyramid, as e2e-testing is as close to the user, brings maximum benefit, immediately pays off.</p><h2 id="links" tabindex="-1"><a class="header-anchor" href="#links" aria-hidden="true">#</a> Links</h2>`,17),p={href:"https://wiki.c2.com/?ArrangeActAssert",target:"_blank",rel:"noopener noreferrer"},h=n("Arrange Act Assert"),u=n(" \u2014 WikiWikiWeb (2012)"),m={href:"https://github.com/VladislavEremeev/QA_bible",target:"_blank",rel:"noopener noreferrer"},g=n("\u0411\u0438\u0431\u043B\u0438\u044F QA"),v=n(" \u2014 \u043E\u0431\u043D\u043E\u0432\u043B\u044F\u0435\u043C\u0430\u044F \u0431\u0430\u0437\u0430 \u0437\u043D\u0430\u043D\u0438\u0439 \u043E\u0431\u044A\u0435\u043C\u043E\u043C 560+ \u0441\u0442\u0440\u0430\u043D\u0438\u0446, Vladislav Eremeev, GitHub (2022) \u{1F1F7}\u{1F1FA}");function D(b,f){const s=o("ExternalLinkIcon");return i(),l("div",null,[c,e("ul",null,[e("li",null,[e("a",p,[h,t(s)]),u]),e("li",null,[e("a",m,[g,t(s)]),v])])])}var _=a(d,[["render",D],["__file","index.html.vue"]]);export{_ as default};
